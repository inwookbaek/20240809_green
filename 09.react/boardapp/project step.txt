1. board-front

-- 프론트프로젝트생성
yarn create react-app board-front --template typescript

-- 프로젝트구조
src
|__ apis
|__ assets
|__ components
|__ constants
|__ hooks
|__ layouts
|__ mocks
|__ stores
|__ types
|__ utils
|__ views


2. board-back

-- 프로젝트구조 
src.main.java.com.lec.board
... common, config, controller, dto, entity, exception, filter, provider, repository, service

-- Authentication
1) basic
  --- 사용자이름, 비번을 Base64로 인코딩하여  Authorization헤더에 포함하여 전송됨
  --- 매우 안전하지 않음, SSL/TLS와 함께 사용
2) Authorization: basic
  a. Bear Token Authentication
     ... 헤더에 Token을 포함하여 전송 Authorization 헤더에 포함하여 전송
     ... JWT를 사용하여 인증
     ... 간단한 방식, 상태를 유지하지 않음, 확장성이 높음
     ... 토큰노출위험, 토큰관리
  b. Authorization : Bearer
  c. OAuth
     ... 토큰기반 인증방식, 사용자가 직접 자격을 증명하지 않고 사전에 인증을 받아서 토큰을 발급받고
     ... 이 토큰을 이용하여 API를 요청하는 방식 OAuth2.0
     ... Kakao, Naver, Git, Facebook
     ... API Key / Session based Authentication 
     ... JWT : Claim이라 불리는 정보를 JSON형태로 안전하게 전송하기 위한 Token
        -> 인증과 정보교환에 사용, 서명이 되어 있어서 신뢰성 확보가 가능
        -> Header : 토큰 타입과 사용된 알고리즘 정보를 담고 있음 Base64Url로 인코딩
        -> Payload : Claim정보, 대상, 발행자, 만료시간등 다양한 정보가 포함, Base64Url로 인코딩
        -> Signature : Header와 Payload, Secret key를 사용하여 생성된 서명
        -> 인증과 정보교환에 사용
        -> 장점 : 서버가 상태를 유지하지 않음, 간단하고 자기 포함적(필요한 정보를 자체적으로 가지고 있음),
                  확장성(다른 곳에서도 인증이 가능)
        -> 단점 : 사이즈(클레임이 많을 수록 토큰크기가 커짐), 
                  보안에 문제가 있다.(서명은 되었지만 암호화는 되어 있지 않음, 따라서 중요한 정보를 JWT에 포함하면 않됨)
                  토큰관리(만료시간이 있어서 갱신등이 번거롭다!)

